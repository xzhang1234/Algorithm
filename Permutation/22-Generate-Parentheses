class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> result;
        if (n == 0) return result;
        string generatedParenthesis = "";
        stack<char> unpairedLeftParenthesis;
        generateParenthesisHelper(n, result, generatedParenthesis, unpairedLeftParenthesis, 0);
        return result;
    }
    
    void generateParenthesisHelper(const int n, vector<string>& result, string generatedParenthesis, stack<char> unpairedLeftParenthesis, int numOfUsedLeftParenthesis) {
    
        if (numOfUsedLeftParenthesis == n && unpairedLeftParenthesis.empty()) {
            result.push_back(generatedParenthesis);
            return;
        }
        if (numOfUsedLeftParenthesis == n) {
            generatedParenthesis.push_back(')');
            unpairedLeftParenthesis.pop();
            generateParenthesisHelper(n, result, generatedParenthesis, unpairedLeftParenthesis, numOfUsedLeftParenthesis);
        } else if (unpairedLeftParenthesis.empty()) {
            generatedParenthesis.push_back('(');
            unpairedLeftParenthesis.push('(');
            generateParenthesisHelper(n, result, generatedParenthesis, unpairedLeftParenthesis, ++numOfUsedLeftParenthesis);
        } else {
            generatedParenthesis.push_back('(');
            unpairedLeftParenthesis.push('(');
            generateParenthesisHelper(n, result, generatedParenthesis, unpairedLeftParenthesis, numOfUsedLeftParenthesis + 1);
            //reverse back all
            generatedParenthesis.pop_back();
            unpairedLeftParenthesis.pop();
            
            
            generatedParenthesis.push_back(')');
            unpairedLeftParenthesis.pop();
            generateParenthesisHelper(n, result, generatedParenthesis, unpairedLeftParenthesis, numOfUsedLeftParenthesis);
        }
    }
};
